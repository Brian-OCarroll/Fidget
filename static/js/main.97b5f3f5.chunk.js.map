{"version":3,"sources":["audio/best.mp3","audio/scroll.ogg","components/lightSwitch.js","components/scroller.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LightSwitch","props","react_default","a","createElement","onClick","click","id","light","className","Scroller","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","lightSwitch","console","log","state","setState","src","lightSound","play","scroller","scrollSound","audio","Audio","paused","currentTime","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yRCEzB,SAASC,EAAYC,GAQhC,OAGEC,EAAAC,EAAAC,cAAA,OAAKC,QAASJ,EAAMK,MAAOC,GAAIN,EAAMO,MAAQ,YAAc,KAAMC,UAAU,qCACvEP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,UACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBCdV,SAASC,EAAST,GAI/B,OACEC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iCACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,OAAKC,QAASJ,EAAMK,MAAOG,UAAU,SACnCP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACfP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,2BC4CZE,cApDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBFI,YAAc,WACZC,QAAQC,IAAIT,EAAKU,MAAMd,OACvBI,EAAKW,SAAS,CACZf,OAAQI,EAAKU,MAAMd,MACnBgB,IAAKC,KACJ,WACDb,EAAKc,UAvBKd,EA0Bde,SAAW,WACPf,EAAKW,SAAS,CACZC,IAAII,KACH,WACDhB,EAAKc,UA9BGd,EAiCdc,KAAO,WACLd,EAAKiB,MAAQ,IAAIC,MAAMlB,EAAKU,MAAME,KAC9BZ,EAAKiB,MAAME,OACbnB,EAAKiB,MAAMH,OAEXd,EAAKiB,MAAMG,YAAc,GApC3BpB,EAAKU,MAAO,CACVd,OAAO,EACPgB,IAAKC,KAJKb,qHA0CZ,OACEV,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAaM,KAAKO,MAAMd,MAAQ,oCAAsC,eAC3EN,EAAAC,EAAAC,cAACJ,EAAD,CAAaQ,MAAOO,KAAKO,MAAMd,MAAOF,MAAOS,KAAKI,cAClDjB,EAAAC,EAAAC,cAACM,EAAD,CAAUJ,MAAOS,KAAKY,mBA/CZM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.97b5f3f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/best.eb7e43ae.mp3\";","module.exports = __webpack_public_path__ + \"static/media/scroll.6280378d.ogg\";","import React from 'react';\nimport '../scss/lightswitch.scss'\nexport default function LightSwitch(props) {\n    // const [light, setLight] = useState([\n    //   {\n    //     on: false,\n  \n    //   }\n    // ]);\n    \n    return (\n        //need to put the onclick on the input as the label also fires off an onclick\n        //can change later when getting rid of label and input\n      <div onClick={props.click} id={props.light ? \"lights-on\" : null} className=\"container --container-lightswitch\" >\n          <div className=\"screw\"></div>\n          <div className=\"switch\"></div>\n          <div className=\"screw\"></div>\n      </div>\n    )\n  }\n  ","import React from 'react';\nimport '../scss/scroller.scss'\nexport default function Scroller(props) {\n  //add on scroll property\n  //add velocity\n  \n  return (\n    <div className=\"container container--scroller\" >\n      <div className=\"cube-side\">\n        <div onClick={props.click} className=\"wheel\">\n          <div className=\"flex notches\">\n            <div className=\"notch --notch1\"></div>\n            <div className=\"notch --notch2\"></div>\n            <div className=\"notch --notch3\"></div>\n            <div className=\"notch --notch4\"></div>\n            <div className=\"notch --notch5\"></div>\n        \n          </div>\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport lightSound from './audio/best.mp3';\nimport scrollSound from './audio/scroll.ogg';\nimport './scss/App.scss';\nimport LightSwitch from './components/lightSwitch';\nimport Scroller from './components/scroller';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state= {\n      light: false,\n      src: lightSound\n    }\n\n  }\n  componentDidMount() {\n    \n  }\n  // loadAudio() {\n  //   // this.src = './audio/breaker1.mp3';\n  //   this.audio = new Audio(this.state.src);\n  //   this.audio.preload = 'auto';\n  //   this.audio.load();\n  // }\n  lightSwitch = () => {\n    console.log(this.state.light)\n    this.setState({\n      light: !this.state.light,\n      src: lightSound\n    }, () => {\n      this.play();\n    })\n  }\n  scroller = () => {\n      this.setState({\n        src:scrollSound\n      }, () => {\n        this.play();\n      })\n  }\n  play = () => {\n    this.audio = new Audio(this.state.src);\n    if (this.audio.paused) {\n      this.audio.play();\n    } else {\n      this.audio.currentTime = 0\n    }\n  }\n  render() {\n    return (\n      <div className=\"App flex\">\n        <div className= { this.state.light ? \"background --background-light-on \" : \"background\" }></div>\n        <LightSwitch light={this.state.light} click={this.lightSwitch} />\n        <Scroller click={this.scroller}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}